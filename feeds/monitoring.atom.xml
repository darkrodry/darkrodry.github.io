<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>El blog de DarkRodry - Monitoring</title><link href="https://darkrodry.github.io/" rel="alternate"></link><link href="https://darkrodry.github.io/feeds/monitoring.atom.xml" rel="self"></link><id>https://darkrodry.github.io/</id><updated>2022-07-10T00:00:00+02:00</updated><subtitle>Miscelaneous Developer</subtitle><entry><title>Tácticas para monitorización</title><link href="https://darkrodry.github.io/tacticas-monitorizacion.html" rel="alternate"></link><published>2022-07-10T00:00:00+02:00</published><updated>2022-07-10T00:00:00+02:00</updated><author><name>DarkRodry</name></author><id>tag:darkrodry.github.io,2022-07-10:/tacticas-monitorizacion.html</id><summary type="html">&lt;p&gt;En esta segunda parte del resumen de &lt;em&gt;Practical Monitoring&lt;/em&gt; nos centraremos más en que puntos de todo el sistema monitorizar, desde los diferentes puntos de vista de todas sus componentes: negocio, aplicaciones, infraestructura, seguridad...&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="principios-basicos-monitorizacion.html"&gt;anterior artículo&lt;/a&gt; hice un resumen sobre cuales son los principios básicos para monitorizar tus aplicaciones: la importancia que tiene y varios patrones y antipatrones a tener en cuenta. En esta segunda parte nos centraremos más en que puntos de todo el sistema monitorizar, desde los diferentes puntos de vista de todas sus componentes: negocio, aplicaciones, infraestructura, seguridad...&lt;/p&gt;
&lt;h3&gt;Monitorizar el negocio&lt;/h3&gt;
&lt;p&gt;Uno de los puntos más importantes sobre el que tener métricas es el negocio. Es la forma más rápida de ver si el sistema está funcionando correctamente o el impacto que pueden tener nuevos desarrollos sobre todo el sistema. Para poder saber que testear correctamente, es importante definir unos buenos KPIs (key performance indicator) y relacionar estos KPI con elementos de nuestro sistema.&lt;/p&gt;
&lt;p&gt;Hay varios KPI comunes en las empresas: ingresos recurrentes mensuales, los ingresos por empleado, el &lt;a href="https://es.wikipedia.org/wiki/Net_Promoter_Score"&gt;NPS&lt;/a&gt;, el &lt;em&gt;customer lifetime value&lt;/em&gt;, el coste de adquisición de usuario, el margen de beneficios... Trata de buscar cómo impacta la plataforma en estos valores y agrega métricas para detectar comportamientos extraños lo antes posible. Ejemplos pueden ser el número total de usuarios activos o los productos/servicios contratados (por los que se paga dinero).&lt;/p&gt;
&lt;h3&gt;Monitorizar el frontend&lt;/h3&gt;
&lt;p&gt;Una de las cosas a las que menos atención se le presta es a las métricas de los diferentes clientes en nuestro sistema. A la hora de obtener métricas en front hay dos tipos de aproximaciones: monitorización de usuarios reales (RUM) y de usuarios sintéticos (creando falsas peticiones bajo diferentes condiciones).&lt;/p&gt;
&lt;p&gt;Una herramienta muy común para monitorizar fronts es Google Analytics, una herramienta tipo RUM que analiza cómo interacciona el usuario con el cliente.&lt;/p&gt;
&lt;p&gt;A la hora de monitorizar el front, es importante controlar el tiempo de carga de las diferentes páginas usando el &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming"&gt;API &lt;em&gt;PerformanceNavigationTiming&lt;/em&gt;&lt;/a&gt; (utiliza los eventos &lt;code&gt;domComplete - navigationStart&lt;/code&gt; y &lt;code&gt;domInteractive - navigationStart&lt;/code&gt;). También es bueno almacenar logs (y no volcarlos por &lt;code&gt;console.log()&lt;/code&gt;) y enviar los errores de JavScript.&lt;/p&gt;
&lt;p&gt;Cualquier métrica relacionada con los tiempos de carga puede ser integrada en tu flujo de CI para asegurar que se mantienen unos tiempos adecuados, y también hay soluciones para configurar&lt;/p&gt;
&lt;h3&gt;Monitorizar el backend&lt;/h3&gt;
&lt;p&gt;Para monitorizar tu aplicación backend es recomendable controlar los servicios clave. Para ello se puede controlar tanto llamadas exitosas/fallidas, duración de cada llamada, etc. Cualquier dato que sea relevante para tu negocio. Para controlar estas métricas existen herramientas como &lt;a href="https://github.com/statsd/statsd"&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Estas métricas generadas son muy útiles para controlar las releases, tanto para analizar el uso de nuevas funcionalidad desplegadas como para detectar posibles errores introducidos.&lt;/p&gt;
&lt;p&gt;También es importante generar logs en tu aplicación. Ten cuidado con los logs que generas, ya que es fácil generar logs en exceso (o en defecto). Una buena forma de saber que logear es responder a las preguntas que te harías en caso de que algo falle.&lt;/p&gt;
&lt;p&gt;Otro patrón muy útil en la monitorización es el endpoint de &lt;em&gt;health&lt;/em&gt;, que se utiliza para conocer de un vistazo el estado de la aplicación.&lt;/p&gt;
&lt;p&gt;En el caso de que tu aplicación esté basada en lambdas o microservicios es importante tener trazabilidad de las peticiones entre diferentes piezas, pudiendo analizar el origen y por dónde ha pasado cada petición.&lt;/p&gt;
&lt;h3&gt;Monitorizar el servidor&lt;/h3&gt;
&lt;p&gt;El propio sistema operativo del servidor es capaz de proporcionar métricas útiles: CPU, memoria (RAM, cachés...), estado de red, discos duros, carga del procesador... También es importante controlar otras cosas cómo los certificados SSL, el estado de los servidores web o si los &lt;em&gt;crons&lt;/em&gt; se han ejecutado.&lt;/p&gt;
&lt;p&gt;Dentro de tu servidor puede haber otros componentes que controlar cómo balanceadores de carga, colas de mensajes, la base de datos, cachés, DNS... En caso de estar dentro de una infraestructura corporativa asegúrate también de monitorizar los diferentes elementos dentro de la misma.&lt;/p&gt;
&lt;h3&gt;Monitorizar la red&lt;/h3&gt;
&lt;p&gt;Monitorizar el correcto funcionamiento de la red es una tarea complicada. Existe un protocolo llamado &lt;a href="https://es.wikipedia.org/wiki/Protocolo_simple_de_administraci%C3%B3n_de_red"&gt;SNMP&lt;/a&gt; que se encarga de almacenar y gestionar múltiple métricas, pero su implementación es muy dependiente del fabricante de los equipos. Entre las métricas más comunes está la latencia, el ancho de banda, la capacidad, los errores o el &lt;em&gt;jitter&lt;/em&gt; (fluctuaciones de red)&lt;/p&gt;
&lt;p&gt;Intenta almacenar el historial de configuraciones y de notificar cuando se producen cambios.&lt;/p&gt;
&lt;p&gt;En caso de tener servicios de streaming de voz o video, necesitarás agregar métricas para controlar que ofreces un buen servicio de codificación a tus usuarios.&lt;/p&gt;
&lt;h3&gt;Monitorizar la seguridad&lt;/h3&gt;
&lt;p&gt;Es muy probable que tu sistema tenga que cumplir unas certificaciones de seguridad. Monitorizar estos requisitos (origen de las conexiones, usuarios que las realizan, ejecución de antivirus...) es una forma eficiente de controlar el cumplimiento de los mismos de cara a auditorias.&lt;/p&gt;
&lt;p&gt;Otro punto a controlar son las conexiones SSH efectuadas o las ejecuciones a nivel de superusuario. Puedes usar herramientas como &lt;a href="https://www.man7.org/linux/man-pages/man8/auditd.8.html"&gt;&lt;em&gt;auditd&lt;/em&gt;&lt;/a&gt; para ayudarte con esta tarea. También es importante controlar los &lt;em&gt;syslog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Una vez dentro de tu sistema, hay que controlar dos frentes usando &lt;em&gt;Host Intrusion Detection Systems&lt;/em&gt; (HIDS) y &lt;em&gt;Network Intrusion Detection Systems&lt;/em&gt; (NIDS). Para el primero es útil usar &lt;a href="http://rkhunter.sourceforge.net/"&gt;&lt;em&gt;rkhunter&lt;/em&gt;&lt;/a&gt; para ayudarte a detectar rootkits. Para ayudarte a analizar el trafico de red dentro de tu infraestructura puedes usar &lt;em&gt;network taps&lt;/em&gt;, que interceptan todo el tráfico y lo envían a otro sistema para su análisis.&lt;/p&gt;</content><category term="Monitoring"></category><category term="libros"></category><category term="tech"></category><category term="monitoring"></category><category term="practical monitoring"></category></entry><entry><title>Principios básicos para monitorización</title><link href="https://darkrodry.github.io/principios-basicos-monitorizacion.html" rel="alternate"></link><published>2022-06-12T00:00:00+02:00</published><updated>2022-07-10T00:00:00+02:00</updated><author><name>DarkRodry</name></author><id>tag:darkrodry.github.io,2022-06-12:/principios-basicos-monitorizacion.html</id><summary type="html">&lt;p&gt;Actualmente ando investigando y mejorando mis conocimientos sobre monitorización. Más allá de una forma de medir el estado de tu sistema, la monitorización permite obtener datos de uso, fallos, estadísticas y otras métricas relacionadas con cómo utilizan los usuarios todo tu trabajo. Todo esto puede ayudarte a la hora de tomar decisiones, ya que con toda esta información puedes saber qué acciones pueden resultar confusas para el usuario, cuáles son los errores que se producen más a menudo y ayudar a simplificar el uso o analizar la aceptación de nuevas funcionalidades. Al final de todo, ¿qué hay mas satisfactorio en nuestro trabajo que ver cómo los usuarios utilizan y están felices con lo que hacemos?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Actualmente ando investigando y mejorando mis conocimientos sobre monitorización. Más allá de una forma de medir el estado de tu sistema, la monitorización permite obtener datos de uso, fallos, estadísticas y otras métricas relacionadas con cómo utilizan los usuarios todo tu trabajo. Todo esto puede ayudarte a la hora de tomar decisiones, ya que con toda esta información puedes saber qué acciones pueden resultar confusas para el usuario, cuáles son los errores que se producen más a menudo y ayudar a simplificar el uso o analizar la aceptación de nuevas funcionalidades. Al final de todo, ¿qué hay mas satisfactorio en nuestro trabajo que ver cómo los usuarios utilizan y están felices con lo que hacemos?&lt;/p&gt;
&lt;p&gt;En este post (y alguno más que iré subiendo) colgaré mis notas sobre el libro &lt;a href="https://www.practicalmonitoring.com/"&gt;Practical Monitoring&lt;/a&gt; de Mike Julian. Es un libro que me está gustando bastante, ya que da una buena introducción al tema agnóstica de cualquier herramienta.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: block; margin-left: auto; margin-right: auto; width: 30%" src="images/practical-monitoring.jpg" alt="practical monitoring cover"&gt;&lt;/p&gt;
&lt;h3&gt;Anti patrones&lt;/h3&gt;
&lt;p&gt;En esta sección se agrupan diferentes patrones a evitar a la hora de trabajar en tu sistema de monitorización.&lt;/p&gt;
&lt;h5&gt;Obsesión con las herramientas&lt;/h5&gt;
&lt;p&gt;A la hora de monitorizar, no te obsesiones con las herramientas. Evita crear dependencias entre tu sistema de monitorización y la herramienta (o herramientas) utilizadas. Tampoco debes limitarte a una sola herramienta, ya que no existe una que sea perfecta y te permita controlar todo lo que necesitas. Tampoco de te dejes llevar por modas o por "noseque compañía famosa utiliza tal herramienta". Lo mejor que puedes hacer es buscar la o las herramientas necesarias y, solo en caso de ser necesario, implementar tu propia solución.&lt;/p&gt;
&lt;h5&gt;Considerar la monitorización como un trabajo&lt;/h5&gt;
&lt;p&gt;No hay que considerar la monitorización como responsabilidad de uno o mas miembros del equipo: es responsabilidad de todos. Como desarrollador, tienes que tener el conocimiento y la capacidad para trabajar con la monitorización necesaria para todos tus desarrollos. Al trabajar con una parte concreta de tu aplicación, tienes el contexto de que hay qué y dónde monitorizar, por lo que no hay nadie mejor para implementarlo.&lt;/p&gt;
&lt;h5&gt;Monitorizar por monitorizar&lt;/h5&gt;
&lt;p&gt;Es importante no tener métricas por tenerlas. Suele ser muy común controlar el uso de CPU, el porcentaje de disco, tener alertas que ignoramos... En este caso, deberías replantearte tus métricas planteando que significa que tu sistema funcione y empezar a controlar eso: un endpoint funcionando, una respuesta predeterminada, una web cargando...&lt;/p&gt;
&lt;h5&gt;Monitorizar como soporte&lt;/h5&gt;
&lt;p&gt;Monitorizar no arregla cosas. Está muy bien utilizar la monitorización para notificar errores, pero a parte de arreglar los daños causados por el error es mas importante reparar el centro del problema y evitar que el fallo se vuelva a repetir.&lt;/p&gt;
&lt;h5&gt;Configuración manual&lt;/h5&gt;
&lt;p&gt;La monitorización debería ser automática. Al agregar una nueva métrica, nuestro sistema debería detectarla automáticamente. Además deberíamos ser capaces de automatizar los procesos para solucionar problemas detectados por nuestras métricas (&lt;em&gt;runbooks&lt;/em&gt;) y no solamente generar alertas.&lt;/p&gt;
&lt;h3&gt;Patrones&lt;/h3&gt;
&lt;p&gt;Una vez vistos los patrones a evitar, toca ver cuales son las buenas prácticas para monitorizar. Muchos de estos patrones son el contrapunto de los anti patrones vistos en la sección anterior, pero con más información sobre cómo implementarlos.&lt;/p&gt;
&lt;h5&gt;Compón métricas para hacer tu plataforma&lt;/h5&gt;
&lt;p&gt;Usa múltiples herramientas de monitorización e intenta acoplarlas entre ellas sin forzar para crear tu plataforma de monitorización. Una plataforma de monitorización se compone de varios sistemas para diferentes tareas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;obtención de datos. Para recibir datos, puede hacer push (el sistema las recibe de los diferentes nodos) o pull (el sistema las solicita a los nodos). Los datos que recibe son métricas o logs.&lt;/li&gt;
&lt;li&gt;almacenamiento de datos.&lt;/li&gt;
&lt;li&gt;visualización de los datos recopilados.&lt;/li&gt;
&lt;li&gt;generar analíticas y reportes&lt;/li&gt;
&lt;li&gt;enviar alertas&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Monitorizar desde la perspectiva del usuario&lt;/h5&gt;
&lt;p&gt;Si tienes que empezar a monitorizar algo, empieza a hacerlo desde la perspectiva del usuario. Esto permite tener una visibilidad mucho mayor sobre el uso y el estado de tu sistema. Una de las métricas mas sencillas y efectivas es analizar el código HTTP y la latencia de tus servicios.&lt;/p&gt;
&lt;h5&gt;Comprar mejor que construir&lt;/h5&gt;
&lt;p&gt;No tener que montar tu propio sistema de monitorización es más barato de lo que parece. La inversión necesaria en conocimientos, personal y el tiempo dedicado a esta tarea en vez de al producto principal de tu empresa compensa de sobra el gasto en cualquier SaaS.&lt;/p&gt;
&lt;h5&gt;Mejora continua&lt;/h5&gt;
&lt;p&gt;Es importante seguir trabajando día a día en tus métricas y en tu sistema de monitorización. Lo que es útil y te permite realizar seguimiento de tu sistema en este instante puede dejar de serlo la próxima semana.&lt;/p&gt;
&lt;h3&gt;Gestión de incidencias&lt;/h3&gt;
&lt;p&gt;Una vez tienes diseñado tu sistema de monitorización, el siguiente paso es agregar alertas en caso de que algo no funcione como se espera y cómo actuar en ese escenario.&lt;/p&gt;
&lt;p&gt;Sobre los tipos de alerta, se pueden diferencias dos alertas a generar: alertas que requieren una acción inmediata (no funciona el sistema, la base de datos es inaccesible) o alertas para informar de que algo no ha funcionado pero no requieren acción inmediata (un cron no se ha ejecutado). En base a esto, podemos ver diferentes tipos de alertas: las que requieren acción inmediata deberían generar una llamada o algún tipo de mensaje que requiera respuesta inmediata, las segundas algún tipo de alerta asíncrona (mensaje en un canal de slack, intenta evitar emails) y en caso de no requerir ni siquiera acción solamente almacenarla dentro de tus ficheros de logs, algo que debería pasar en todos los casos.&lt;/p&gt;
&lt;p&gt;Intenta generar &lt;em&gt;runbooks&lt;/em&gt;, documentos que permitan realizar un diagnóstico y aplicar una solución a cualquier persona independientemente de su conocimiento sobre esa parte del sistema: qué hace el servicio afectado, quién es el responsable, sus dependencias, un resumen de su diseño, cuáles son sus métricas o que alertas tiene implementadas. Evita abusar de este tipo de documentos para solucionar problemas, si un problema se puede solucionar con una serie de comandos... ¿no es mejor implementar esa solución dentro de tu sistema que dejarla dentro de un documento?&lt;/p&gt;
&lt;p&gt;A la hora de definir los umbrales para las alertas, evita tener valores numéricos arbitrarios. Define tus valores en base a cambios drásticos, percentiles o comparaciones con periodos pasados para evitar lanzar alertas que realmente no lo son. También es importante evitar alarmas "ruidosas", que se envían con frecuencia. En caso de tener alguna alarma que no requieran que nadie actúe, que se hayan recibido múltiples veces en el último mes y se hayan ignorado o que la acción llevada a cabo pueda ser automatizada, borra dicha alerta lo más pronto posible. Generar muchas alertas falsas suele derivar en fatiga y en que tu equipo termine ignorando estas notificaciones, incluso cuando estas son de verdad.&lt;/p&gt;
&lt;p&gt;En muchos proyectos es necesario tener un equipo &lt;em&gt;on-call&lt;/em&gt;, que tenga que estar disponible fuera de horario laboral por si hay algún problema (remuneradas siempre, por supuesto). En estos casos, es muy importante el punto anterior: evitar lanzar alertas que realmente no lo son, ya que a nadie le gusta que le despierten a las 3 de la mañana con una falsa alarma. De igual forma es importante que tus alertas no sean excesivas, ya que estar constantemente apagando fuegos también es agotador. Es aconsejable tener un sistema de gestión de incidencias para facilitar el trabajo: permite hacer seguimiento, escalar a otros departamentos en caso de ser necesario y documentar las acciones realizadas. Cualquier intervención debería concluir con un postmortem en el que se discuta el problema y se plantee una solución para evitar futuras intervenciones. En estos equipos es importante tener una buena rotación, con mucho tiempo entre guardia y guardia para poder descansar. También es importante compensar a la gente que está de guardia, tanto económicamente (con bonus extra en caso de realizar intervenciones) cómo con días de descanso (siempre viene bien descansar después de varios días pendiente del teléfono por si pasa algo).&lt;/p&gt;
&lt;h3&gt;La importancia de la estadística&lt;/h3&gt;
&lt;p&gt;Como último punto, es importante destacar la importancia de la estadística a la hora de tener buenas métricas. Ten siempre en mente la media, mediana, temporalidad, cuartiles/percentiles y desviación estándar a la hora de calcular métricas y alertas para tener información mas relevante.&lt;/p&gt;
&lt;p&gt;En el &lt;a href="tacticas-monitorizacion"&gt;siguiente artículo&lt;/a&gt; nos centraremos en las diferentes partes del sistema a monitorizar.&lt;/p&gt;</content><category term="Monitoring"></category><category term="libros"></category><category term="tech"></category><category term="monitoring"></category><category term="practical monitoring"></category></entry></feed>